{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/cdk/scrolling\";\nfunction LineChartComponent_div_1_ng_container_3_app_line_chart_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-line-chart\", 9);\n  }\n  if (rf & 2) {\n    const pts_r2 = i0.ɵɵnextContext().ngIf;\n    const sym_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"symbol\", sym_r3)(\"data\", pts_r2);\n  }\n}\nfunction LineChartComponent_div_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, LineChartComponent_div_1_ng_container_3_app_line_chart_1_Template, 1, 2, \"app-line-chart\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const pts_r2 = ctx.ngIf;\n    i0.ɵɵnextContext();\n    const noData_r4 = i0.ɵɵreference(6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", pts_r2.length > 1)(\"ngIfElse\", noData_r4);\n  }\n}\nfunction LineChartComponent_div_1_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10);\n    i0.ɵɵtext(1, \" Not enough data for this range / interval. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LineChartComponent_div_1_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ans_r6 = ctx.ngIf;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ans_r6);\n  }\n}\nfunction LineChartComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, LineChartComponent_div_1_ng_container_3_Template, 2, 2, \"ng-container\", 3);\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵtemplate(5, LineChartComponent_div_1_ng_template_5_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(7, \"div\", 4);\n    i0.ɵɵelement(8, \"input\", 5);\n    i0.ɵɵelementStart(9, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function LineChartComponent_div_1_Template_button_click_9_listener() {\n      const sym_r3 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.ask(sym_r3));\n    });\n    i0.ɵɵtext(10, \"Ask AI\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, LineChartComponent_div_1_p_11_Template, 2, 1, \"p\", 7);\n    i0.ɵɵpipe(12, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sym_r3 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", sym_r3, \" price\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 6, ctx_r4.priceSeries.get(sym_r3)));\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Ask about \", sym_r3, \"\\u2026\");\n    i0.ɵɵproperty(\"formControl\", ctx_r4.question);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(12, 8, ctx_r4.answer$));\n  }\n}\n/**\n * A thin wrapper around ngx‑charts' <ngx-charts-line-chart>.\n * It turns our raw price array into the [{name, series:[…]}] format the\n * library expects and uses OnPush so Angular only re‑checks the component\n * when @Input values actually change.\n */\nexport let LineChartComponent = /*#__PURE__*/(() => {\n  class LineChartComponent {\n    constructor() {\n      /** Array of candles for a single stock symbol */\n      this.data = [];\n      /** The stock ticker (e.g. \"NVDA\") used for the legend/tooltip label */\n      this.symbol = '';\n    }\n    /**\n     * ngx‑charts needs:\n     * [\n     *   {\n     *     name: 'NVDA',\n     *     series: [\n     *       { name: Date, value: closePrice },\n     *       …\n     *     ]\n     *   }\n     * ]\n     *\n     * We guard against the first null/undefined emission so Angular won’t\n     * throw “Cannot read properties of null (reading 'map')”.\n     */\n    get series() {\n      const points = this.data ?? [];\n      return [{\n        name: this.symbol,\n        series: points.map(p => ({\n          name: new Date(p.date),\n          value: p.close\n        }))\n      }];\n    }\n    static {\n      this.ɵfac = function LineChartComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || LineChartComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LineChartComponent,\n        selectors: [[\"app-line-chart\"]],\n        inputs: {\n          data: \"data\",\n          symbol: \"symbol\"\n        },\n        decls: 2,\n        vars: 1,\n        consts: [[\"noData\", \"\"], [\"itemSize\", \"500\", 1, \"viewport\", 2, \"height\", \"calc(100vh - 60px)\", \"display\", \"block\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [4, \"ngIf\"], [1, \"chat\"], [3, \"placeholder\", \"formControl\"], [3, \"click\"], [\"class\", \"answer\", 4, \"ngIf\"], [3, \"symbol\", \"data\", 4, \"ngIf\", \"ngIfElse\"], [3, \"symbol\", \"data\"], [2, \"color\", \"gray\", \"margin\", \"2rem 0\"], [1, \"answer\"]],\n        template: function LineChartComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 1);\n            i0.ɵɵtemplate(1, LineChartComponent_div_1_Template, 14, 10, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"cdkVirtualForOf\", ctx.symbols);\n          }\n        },\n        dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i3.CdkFixedSizeVirtualScroll, i3.CdkVirtualForOf, i3.CdkVirtualScrollViewport, LineChartComponent, i1.AsyncPipe],\n        styles: [\"@charset \\\"UTF-8\\\";[_nghost-%COMP%]{display:block;margin-bottom:1.5rem}\"],\n        changeDetection: 0\n      });\n    }\n  }\n  return LineChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}