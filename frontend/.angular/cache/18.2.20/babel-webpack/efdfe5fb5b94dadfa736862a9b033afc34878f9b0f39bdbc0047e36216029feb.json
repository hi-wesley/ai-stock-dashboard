{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { of, switchMap, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/stock.service\";\nimport * as i2 from \"../core/services/chat.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/cdk/scrolling\";\nimport * as i6 from \"../shared/visualize/line-chart.component\";\nfunction DashboardComponent_div_1_ng_container_3_app_line_chart_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-line-chart\", 9);\n  }\n  if (rf & 2) {\n    const pts_r2 = i0.ɵɵnextContext().ngIf;\n    const sym_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"symbol\", sym_r3)(\"data\", pts_r2);\n  }\n}\nfunction DashboardComponent_div_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DashboardComponent_div_1_ng_container_3_app_line_chart_1_Template, 1, 2, \"app-line-chart\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const pts_r2 = ctx.ngIf;\n    i0.ɵɵnextContext();\n    const noData_r4 = i0.ɵɵreference(6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", pts_r2.length > 1)(\"ngIfElse\", noData_r4);\n  }\n}\nfunction DashboardComponent_div_1_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10);\n    i0.ɵɵtext(1, \" Not enough data for this symbol (try a longer range in code). \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_div_1_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ans_r6 = ctx.ngIf;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ans_r6);\n  }\n}\nfunction DashboardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, DashboardComponent_div_1_ng_container_3_Template, 2, 2, \"ng-container\", 3);\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵtemplate(5, DashboardComponent_div_1_ng_template_5_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(7, \"div\", 4);\n    i0.ɵɵelement(8, \"input\", 5);\n    i0.ɵɵelementStart(9, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_1_Template_button_click_9_listener() {\n      const sym_r3 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.ask(sym_r3));\n    });\n    i0.ɵɵtext(10, \"Ask AI\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, DashboardComponent_div_1_p_11_Template, 2, 1, \"p\", 7);\n    i0.ɵɵpipe(12, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sym_r3 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", sym_r3, \" price\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 6, ctx_r4.priceSeries.get(sym_r3)));\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Ask about \", sym_r3, \"\\u2026\");\n    i0.ɵɵproperty(\"formControl\", ctx_r4.question);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(12, 8, ctx_r4.answer$));\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(stocks, chat) {\n      this.stocks = stocks;\n      this.chat = chat;\n      /* ----------------------- config ----------------------- */\n      this.RANGE = '1mo';\n      this.INTERVAL = '1d';\n      /* ----------------------- state ------------------------ */\n      this.symbols = []; // dynamic list\n      this.priceSeries = new Map(); // chart data\n      this.questionMap = new Map(); // one input per row\n      this.answerMap = new Map(); // one answer stream\n      /* search bar */\n      this.search = new FormControl('');\n    }\n    ngOnInit() {\n      /* preload a few tickers */\n      ['NVDA', 'GOOGL', 'SCHG'].forEach(t => this.addSymbol(t));\n    }\n    /* ---------------- add / remove symbols ---------------- */\n    addSymbol(ticker) {\n      const sym = (ticker ?? this.search.value)?.trim().toUpperCase();\n      if (!sym || this.symbols.includes(sym)) return;\n      /* update list & create per-row controls */\n      this.symbols = [...this.symbols, sym]; // new reference → OnPush refresh\n      this.questionMap.set(sym, new FormControl(''));\n      /* fetch history (slice -100 to keep payload small) */\n      const obs = this.stocks.getHistory(sym, this.RANGE, this.INTERVAL).pipe(map(arr => arr.slice(-100)));\n      this.priceSeries.set(sym, obs);\n      this.search.reset();\n    }\n    removeSymbol(sym) {\n      this.symbols = this.symbols.filter(s => s !== sym);\n      this.priceSeries.delete(sym);\n      this.questionMap.delete(sym);\n      this.answerMap.delete(sym);\n    }\n    /* -------------------------- chat -------------------------- */\n    ask(sym) {\n      const control = this.questionMap.get(sym);\n      if (!control) return;\n      const q = control.value?.trim();\n      if (!q) return;\n      const series$ = this.priceSeries.get(sym) ?? of([]);\n      const ans$ = series$.pipe(switchMap(series => this.chat.ask(q, {\n        symbol: sym,\n        range: this.RANGE,\n        series\n      })), map(r => r.answer));\n      this.answerMap.set(sym, ans$);\n      control.reset(); // clear the input after sending\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DashboardComponent)(i0.ɵɵdirectiveInject(i1.StockService), i0.ɵɵdirectiveInject(i2.ChatService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 2,\n        vars: 1,\n        consts: [[\"noData\", \"\"], [\"itemSize\", \"500\", 1, \"viewport\", 2, \"height\", \"calc(100vh - 40px)\", \"display\", \"block\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [4, \"ngIf\"], [1, \"chat\"], [3, \"placeholder\", \"formControl\"], [3, \"click\"], [\"class\", \"answer\", 4, \"ngIf\"], [3, \"symbol\", \"data\", 4, \"ngIf\", \"ngIfElse\"], [3, \"symbol\", \"data\"], [2, \"color\", \"gray\", \"margin\", \"2rem 0\"], [1, \"answer\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 1);\n            i0.ɵɵtemplate(1, DashboardComponent_div_1_Template, 14, 10, \"div\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"cdkVirtualForOf\", ctx.symbols);\n          }\n        },\n        dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i5.CdkVirtualScrollViewport, i6.LineChartComponent, i3.AsyncPipe],\n        styles: [\".search[_ngcontent-%COMP%]{display:flex;gap:.5rem;margin:1rem 0}.remove[_ngcontent-%COMP%]{margin-left:.5rem;background:transparent;border:none;cursor:pointer;font-size:1rem}.chat[_ngcontent-%COMP%]{margin-top:1rem}.chat[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:18rem}.chat[_ngcontent-%COMP%]   .answer[_ngcontent-%COMP%]{margin-top:.25rem;color:#4169e1}\"],\n        changeDetection: 0\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}