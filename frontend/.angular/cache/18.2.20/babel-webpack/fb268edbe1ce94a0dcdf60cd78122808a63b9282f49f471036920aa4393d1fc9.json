{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { shareReplay } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StockService = /*#__PURE__*/(() => {\n  class StockService {\n    constructor(http) {\n      this.http = http;\n      this.cache = new Map();\n    }\n    /**\n     * Fetch history; memoise identical requests with shareReplay\n     * so charts can subscribe multiple times without extra HTTP calls.\n     */\n    getHistory(symbol, range = '1mo', interval = '1d') {\n      const key = `${symbol}-${range}-${interval}`;\n      if (this.cache.has(key)) return this.cache.get(key);\n      const params = new HttpParams().set('range', range).set('interval', interval);\n      const request$ = this.http.get(`${environment.api}/stocks/${symbol}`, {\n        params\n      }).pipe(shareReplay(1)); // cache the latest emission\n      this.cache.set(key, request$);\n      return request$;\n    }\n    static {\n      this.ɵfac = function StockService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || StockService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: StockService,\n        factory: StockService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return StockService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}