{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { of, switchMap, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/stock.service\";\nimport * as i2 from \"../core/services/chat.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/cdk/scrolling\";\nimport * as i6 from \"../shared/visualize/line-chart.component\";\nfunction DashboardComponent_div_5_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_5_button_6_Template_button_click_0_listener() {\n      const r_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const sym_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.setRange(sym_r2, r_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const r_r5 = ctx.$implicit;\n    const sym_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r2.rangeMap.get(sym_r2) === r_r5);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", r_r5, \" \");\n  }\n}\nfunction DashboardComponent_div_5_ng_container_7_app_line_chart_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-line-chart\", 15);\n  }\n  if (rf & 2) {\n    const pts_r6 = i0.ɵɵnextContext().ngIf;\n    const sym_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"symbol\", sym_r2)(\"data\", pts_r6);\n  }\n}\nfunction DashboardComponent_div_5_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DashboardComponent_div_5_ng_container_7_app_line_chart_1_Template, 1, 2, \"app-line-chart\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const pts_r6 = ctx.ngIf;\n    i0.ɵɵnextContext();\n    const noData_r7 = i0.ɵɵreference(10);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", pts_r6.length > 1)(\"ngIfElse\", noData_r7);\n  }\n}\nfunction DashboardComponent_div_5_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 16);\n    i0.ɵɵtext(1, \" Not enough data for this symbol / range. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_div_5_p_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ans_r8 = ctx.ngIf;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ans_r8, \" \");\n  }\n}\nfunction DashboardComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_5_Template_button_click_3_listener() {\n      const sym_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeSymbol(sym_r2));\n    });\n    i0.ɵɵtext(4, \"\\u2716\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 8);\n    i0.ɵɵtemplate(6, DashboardComponent_div_5_button_6_Template, 2, 3, \"button\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, DashboardComponent_div_5_ng_container_7_Template, 2, 2, \"ng-container\", 10);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵtemplate(9, DashboardComponent_div_5_ng_template_9_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(11, \"div\", 11);\n    i0.ɵɵelement(12, \"input\", 12);\n    i0.ɵɵelementStart(13, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_5_Template_button_click_13_listener() {\n      const sym_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.ask(sym_r2));\n    });\n    i0.ɵɵtext(14, \"Ask AI\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(15, DashboardComponent_div_5_p_15_Template, 2, 1, \"p\", 13);\n    i0.ɵɵpipe(16, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const sym_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", sym_r2, \" price \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.ranges);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(8, 7, ctx_r2.priceSeries.get(sym_r2)));\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Ask about \", sym_r2, \"\\u2026\");\n    i0.ɵɵproperty(\"formControl\", ctx_r2.questionMap.get(sym_r2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(16, 9, ctx_r2.answerMap.get(sym_r2)));\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(stocks, chat) {\n      this.stocks = stocks;\n      this.chat = chat;\n      /* ---------- state ---------- */\n      this.symbols = []; // dynamic list\n      this.priceSeries = new Map();\n      this.rangeMap = new Map();\n      this.questionMap = new Map();\n      this.answerMap = new Map();\n      /* search bar */\n      this.search = new FormControl('');\n      /* fixed order of range buttons */\n      this.ranges = ['1d', '5d', '1mo', '6mo', '1y', '5y', 'max'];\n    }\n    ngOnInit() {\n      /* ✨ only preload NVDA */\n      this.addSymbol('NVDA');\n    }\n    /* ------------- add / remove symbols ------------- */\n    addSymbol(raw) {\n      const sym = (raw ?? this.search.value)?.trim().toUpperCase();\n      if (!sym || this.symbols.includes(sym)) return;\n      this.symbols = [...this.symbols, sym]; // new reference → OnPush\n      this.rangeMap.set(sym, '1mo'); // default\n      this.questionMap.set(sym, new FormControl(''));\n      this.fetchSeries(sym);\n      this.search.reset();\n    }\n    removeSymbol(sym) {\n      this.symbols = this.symbols.filter(s => s !== sym);\n      this.priceSeries.delete(sym);\n      this.rangeMap.delete(sym);\n      this.questionMap.delete(sym);\n      this.answerMap.delete(sym);\n    }\n    /* ------------- data fetch ------------- */\n    fetchSeries(sym) {\n      const range = this.rangeMap.get(sym) ?? '1mo';\n      const interval = this.pickInterval(range);\n      const obs = this.stocks.getHistory(sym, range, interval).pipe(map(arr => arr.slice(-100))); // keep AI payload small\n      this.priceSeries.set(sym, obs);\n    }\n    /** Simple heuristic mapping range → interval */\n    pickInterval(r) {\n      switch (r) {\n        case '1d':\n          return '1d';\n        case '5d':\n          return '5d';\n        case '1mo':\n          return '1mo';\n        case '3mo':\n          return '3mo';\n        case '6mo':\n          return '6mo';\n        case '1y':\n          return '1y';\n        case '2y':\n          return '2y';\n        case '5y':\n          return '5y';\n        case '10y':\n          return '10y';\n        case 'max':\n          return 'max';\n      }\n    }\n    setRange(sym, r) {\n      if (this.rangeMap.get(sym) === r) return;\n      this.rangeMap.set(sym, r);\n      this.fetchSeries(sym);\n    }\n    /* ------------- chat ------------- */\n    ask(sym) {\n      const control = this.questionMap.get(sym);\n      if (!control) return;\n      const q = control.value?.trim();\n      if (!q) return;\n      const range = this.rangeMap.get(sym) ?? '1mo';\n      const series$ = this.priceSeries.get(sym) ?? of([]);\n      const ans$ = series$.pipe(switchMap(series => this.chat.ask(q, {\n        symbol: sym,\n        range,\n        series\n      })), map(r => r.answer));\n      this.answerMap.set(sym, ans$);\n      control.reset();\n    }\n    static {\n      this.ɵfac = function DashboardComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DashboardComponent)(i0.ɵɵdirectiveInject(i1.StockService), i0.ɵɵdirectiveInject(i2.ChatService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: DashboardComponent,\n        selectors: [[\"app-dashboard\"]],\n        decls: 6,\n        vars: 2,\n        consts: [[\"noData\", \"\"], [1, \"search\"], [\"placeholder\", \"Enter ticker (e.g. NVDA)\", 3, \"formControl\"], [3, \"click\"], [\"itemSize\", \"560\", 1, \"viewport\", 2, \"height\", \"calc(100vh - 90px)\", \"display\", \"block\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [1, \"row-header\"], [1, \"remove\", 3, \"click\"], [1, \"range-bar\"], [3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"chat\"], [3, \"placeholder\", \"formControl\"], [\"class\", \"answer\", 4, \"ngIf\"], [3, \"symbol\", \"data\", 4, \"ngIf\", \"ngIfElse\"], [3, \"symbol\", \"data\"], [2, \"color\", \"gray\", \"margin\", \"2rem 0\"], [1, \"answer\"]],\n        template: function DashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 1);\n            i0.ɵɵelement(1, \"input\", 2);\n            i0.ɵɵelementStart(2, \"button\", 3);\n            i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_2_listener() {\n              return ctx.addSymbol();\n            });\n            i0.ɵɵtext(3, \"Add\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(4, \"cdk-virtual-scroll-viewport\", 4);\n            i0.ɵɵtemplate(5, DashboardComponent_div_5_Template, 18, 11, \"div\", 5);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formControl\", ctx.search);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"cdkVirtualForOf\", ctx.symbols);\n          }\n        },\n        dependencies: [i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i5.CdkFixedSizeVirtualScroll, i5.CdkVirtualForOf, i5.CdkVirtualScrollViewport, i6.LineChartComponent, i3.AsyncPipe],\n        styles: [\".search[_ngcontent-%COMP%]{display:flex;gap:.5rem;margin:1rem 0}.row-header[_ngcontent-%COMP%]{display:flex;align-items:center;gap:.5rem}.remove[_ngcontent-%COMP%]{background:transparent;border:none;cursor:pointer;font-size:1rem}.range-bar[_ngcontent-%COMP%]{display:flex;gap:.5rem;margin:.5rem 0 1rem}.range-bar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:.25rem .5rem;border:1px solid #888;background:#fafafa;cursor:pointer}.range-bar[_ngcontent-%COMP%]   button.active[_ngcontent-%COMP%]{background:#4169e1;color:#fff;border-color:#4169e1}.chat[_ngcontent-%COMP%]{margin-top:1rem}.chat[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:18rem}.chat[_ngcontent-%COMP%]   .answer[_ngcontent-%COMP%]{margin-top:.25rem;color:#4169e1}\"],\n        changeDetection: 0\n      });\n    }\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}